buildscript {
    ext {
        springBootVersion = '1.5.2.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'jacoco'


jar {
    baseName = 'CoreResourceAccessMonitor'
    version =  '0.0.1'
}

repositories {
    mavenCentral()
    maven { 
        url "https://jitpack.io" 
    }
    maven {
        url 'https://repo.spring.io/libs-snapshot'
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile('org.springframework.cloud:spring-cloud-starter-config')
    compile('org.springframework.cloud:spring-cloud-starter-eureka')
    compile('org.springframework.cloud:spring-cloud-starter-zipkin') // Causes the java.net.ConnectException
    //compile('org.springframework.cloud:spring-cloud-starter-stream-rabbit')
    compile('org.springframework.boot:spring-boot-starter-data-rest')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-data-mongodb')
    compile('org.springframework.amqp:spring-amqp:2.0.0.M1')
    compile('org.springframework.amqp:spring-rabbit:2.0.0.M1')
    compile('com.googlecode.json-simple:json-simple:1.1.1')
    compile('com.google.code.gson:gson:2.7')
    compile('com.github.symbiote-h2020:SymbIoTeLibraries:develop-SNAPSHOT')

    testCompile('org.springframework.boot:spring-boot-starter-test')

    // Use JUnit4
    testCompile 'junit:junit:4.12'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:Camden.SR6"
        mavenBom 'org.springframework.cloud:spring-cloud-sleuth:1.1.3.RELEASE'
    }
}

jacoco {
    toolVersion = "0.7.7.201606060606"
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

check.dependsOn jacocoTestReport

task generateJavaDocs(type: Javadoc) {
  source = sourceSets.main.allJava
  destinationDir = reporting.file("javadocs")
}
